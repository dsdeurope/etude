from fastapi import FastAPI, APIRouter, HTTPException
from dotenv import load_dotenv
from starlette.middleware.cors import CORSMiddleware
from motor.motor_asyncio import AsyncIOMotorClient
import os
import logging
from pathlib import Path
from pydantic import BaseModel, Field, ConfigDict
from typing import List, Optional
import uuid
from datetime import datetime, timezone
import time
import random
from emergentintegrations.llm.chat import LlmChat, UserMessage


ROOT_DIR = Path(__file__).parent
load_dotenv(ROOT_DIR / '.env')

# MongoDB connection
mongo_url = os.environ['MONGO_URL']
client = AsyncIOMotorClient(mongo_url)
db = client[os.environ['DB_NAME']]

# Configuration des cl√©s Gemini avec rotation automatique
GEMINI_KEYS = [
    os.environ.get('GEMINI_API_KEY_1'),
    os.environ.get('GEMINI_API_KEY_2'),
    os.environ.get('GEMINI_API_KEY_3'),
    os.environ.get('GEMINI_API_KEY_4'),
]
# Filtrer les cl√©s vides
GEMINI_KEYS = [key for key in GEMINI_KEYS if key]

# Bible API configuration
BIBLE_ID = os.environ.get('BIBLE_ID', '')
BIBLE_API_KEY = os.environ.get('BIBLE_API_KEY', '')

# Index de la cl√© actuellement utilis√©e
current_gemini_key_index = 0
gemini_key_usage_count = {i: 0 for i in range(len(GEMINI_KEYS))}

# Fonction pour obtenir la cl√© Gemini active avec rotation automatique
async def get_gemini_key():
    """Retourne la cl√© Gemini active et g√®re la rotation."""
    global current_gemini_key_index
    
    if not GEMINI_KEYS:
        raise HTTPException(status_code=500, detail="Aucune cl√© Gemini configur√©e")
    
    return GEMINI_KEYS[current_gemini_key_index], current_gemini_key_index

async def rotate_gemini_key():
    """Passe √† la cl√© Gemini suivante."""
    global current_gemini_key_index
    current_gemini_key_index = (current_gemini_key_index + 1) % len(GEMINI_KEYS)
    logging.info(f"Rotation vers cl√© Gemini #{current_gemini_key_index + 1}")
    return current_gemini_key_index

async def call_gemini_with_rotation(prompt: str, max_retries: int = None, use_bible_api_fallback: bool = True) -> str:
    """
    Appelle Gemini avec rotation automatique en cas de quota d√©pass√©.
    Si toutes les cl√©s Gemini sont √©puis√©es, bascule sur Bible API.
    """
    if max_retries is None:
        max_retries = len(GEMINI_KEYS)
    
    last_gemini_error = None
    
    # Essayer toutes les cl√©s Gemini
    for attempt in range(max_retries):
        try:
            api_key, key_index = await get_gemini_key()
            gemini_key_usage_count[key_index] += 1
            
            logging.info(f"Tentative {attempt + 1}/{max_retries} avec cl√© Gemini #{key_index + 1}")
            
            # Initialiser le chat Gemini
            chat = LlmChat(
                api_key=api_key,
                session_id=f"generation-{uuid.uuid4()}",
                system_message="Tu es un expert biblique et th√©ologien sp√©cialis√© dans l'√©tude des √âcritures."
            ).with_model("gemini", "gemini-2.0-flash")
            
            # Envoyer le message
            user_message = UserMessage(text=prompt)
            response = await chat.send_message(user_message)
            
            logging.info(f"‚úÖ Succ√®s avec cl√© Gemini #{key_index + 1}")
            return response
            
        except Exception as e:
            error_str = str(e).lower()
            last_gemini_error = e
            
            # V√©rifier si c'est une erreur de quota
            if "quota" in error_str or "rate_limit" in error_str or "429" in error_str or "resource_exhausted" in error_str:
                logging.warning(f"‚ö†Ô∏è  Quota atteint pour cl√© Gemini #{key_index + 1}, rotation vers cl√© suivante...")
                await rotate_gemini_key()
                time.sleep(1)
                continue
            else:
                logging.error(f"‚ùå Erreur avec cl√© Gemini #{key_index + 1}: {e}")
                await rotate_gemini_key()
                continue
    
    # Toutes les cl√©s Gemini sont √©puis√©es, essayer Bible API en fallback
    if use_bible_api_fallback and BIBLE_API_KEY and BIBLE_ID:
        logging.warning(f"‚ö†Ô∏è  Toutes les cl√©s Gemini √©puis√©es, tentative avec Bible API (cl√© #5)...")
        try:
            # G√©n√©rer du contenu avec Bible API comme fallback
            fallback_content = await generate_with_bible_api_fallback(prompt)
            logging.info(f"‚úÖ Succ√®s avec Bible API (cl√© #5) en fallback")
            return fallback_content
        except Exception as bible_error:
            logging.error(f"‚ùå Bible API √©galement √©puis√©e: {bible_error}")
            raise HTTPException(
                status_code=503,
                detail=f"Toutes les 5 cl√©s (4 Gemini + 1 Bible API) ont atteint leur quota. Gemini: {str(last_gemini_error)}, Bible API: {str(bible_error)}"
            )
    
    # Si Bible API n'est pas configur√©e ou d√©sactiv√©e
    raise HTTPException(
        status_code=503,
        detail=f"Toutes les cl√©s Gemini ont atteint leur quota. Derni√®re erreur: {str(last_gemini_error)}"
    )

async def generate_with_bible_api_fallback(prompt: str) -> str:
    """
    G√©n√®re du contenu en utilisant Bible API comme source de texte biblique.
    Utilis√© en fallback quand toutes les cl√©s Gemini sont √©puis√©es.
    """
    import httpx
    import re
    
    logging.info("[BIBLE API FALLBACK] G√©n√©ration avec Bible API")
    
    # Extraire le passage du prompt (ex: "Gen√®se 1" ou "Jean 3:16")
    passage_match = re.search(r'([\w\s]+)\s+chapitre\s+(\d+)', prompt, re.IGNORECASE)
    if not passage_match:
        passage_match = re.search(r'([\w\s]+)\s+(\d+)', prompt)
    
    if not passage_match:
        raise Exception("Impossible d'extraire le passage biblique du prompt")
    
    book_name = passage_match.group(1).strip()
    chapter = passage_match.group(2).strip()
    
    # Extraire les num√©ros de versets
    verse_match = re.search(r'versets?\s+(\d+)\s+(?:√†|-)?\s+(\d+)', prompt, re.IGNORECASE)
    start_verse = int(verse_match.group(1)) if verse_match else 1
    end_verse = int(verse_match.group(2)) if verse_match else 5
    
    logging.info(f"[BIBLE API] R√©cup√©ration: {book_name} {chapter}:{start_verse}-{end_verse}")
    
    # Mapper les noms fran√ßais vers les IDs Bible API
    book_mapping = {
        "gen√®se": "GEN", "exode": "EXO", "l√©vitique": "LEV", "nombres": "NUM",
        "deut√©ronome": "DEU", "josu√©": "JOS", "juges": "JDG", "ruth": "RUT",
        "1 samuel": "1SA", "2 samuel": "2SA", "1 rois": "1KI", "2 rois": "2KI",
        "matthieu": "MAT", "marc": "MRK", "luc": "LUK", "jean": "JHN",
        "actes": "ACT", "romains": "ROM", "1 corinthiens": "1CO", "2 corinthiens": "2CO",
        "jacques": "JAS", "1 pierre": "1PE", "2 pierre": "2PE", "apocalypse": "REV"
    }
    
    book_id = book_mapping.get(book_name.lower(), "GEN")
    
    # Construire le contenu verset par verset avec Bible API
    content_parts = []
    
    async with httpx.AsyncClient() as client:
        for verse_num in range(start_verse, end_verse + 1):
            try:
                # R√©cup√©rer le texte du verset via Bible API
                verse_id = f"{book_id}.{chapter}.{verse_num}"
                response = await client.get(
                    f"https://api.scripture.api.bible/v1/bibles/{BIBLE_ID}/verses/{verse_id}",
                    headers={"api-key": BIBLE_API_KEY},
                    params={"content-type": "text"},
                    timeout=10.0
                )
                
                if response.status_code == 200:
                    data = response.json()
                    verse_text = data.get('data', {}).get('content', 'Texte non disponible')
                    
                    # Nettoyer le texte (enlever les balises HTML)
                    verse_text = re.sub(r'<[^>]+>', '', verse_text).strip()
                    
                    # Cr√©er le contenu structur√© avec Bible API - Nouveau format √† 4 sections
                    verse_content = f"""---

**VERSET {verse_num}**

**üìñ AFFICHAGE DU VERSET :**
{verse_text}

**üìö CHAPITRE :**
Ce verset fait partie du chapitre {chapter} de {book_name}, o√π l'auteur biblique d√©veloppe des enseignements essentiels pour la vie de foi. Le contexte narratif de ce chapitre √©claire la signification profonde de ce verset et sa place dans le message global du livre.

**üìú CONTEXTE HISTORIQUE :**
Ce passage s'inscrit dans le contexte de l'histoire biblique o√π Dieu r√©v√®le sa volont√© √† son peuple. La p√©riode historique, les circonstances g√©ographiques et culturelles, ainsi que les √©v√©nements contemporains ont fa√ßonn√© la r√©daction et la compr√©hension originale de ce texte. Les mots h√©breux/grecs originaux portent des nuances riches qui enrichissent notre compr√©hension du message divin.

**‚úùÔ∏è PARTIE TH√âOLOGIQUE :**
Le texte biblique nous rappelle l'importance de la foi et de l'ob√©issance √† la Parole de Dieu. Chaque mot a √©t√© inspir√© par le Saint-Esprit pour notre instruction et notre √©dification. La signification th√©ologique profonde de ce verset r√©v√®le des aspects essentiels du caract√®re de Dieu et de son plan r√©dempteur.

**Application pratique :** Pour nous aujourd'hui, ce verset nous invite √† m√©diter sur la fid√©lit√© de Dieu et √† appliquer ses principes dans notre vie quotidienne. Il nous encourage √† approfondir notre relation avec le Seigneur et √† vivre selon ses commandements.

**R√©f√©rences crois√©es :** Ce passage trouve des √©chos dans d'autres parties de l'√âcriture, formant un ensemble coh√©rent de la r√©v√©lation divine qui t√©moigne de l'unit√© et de la coh√©rence du message biblique.

"""
                    content_parts.append(verse_content)
                    
                elif response.status_code == 429:
                    raise Exception("Bible API quota √©galement √©puis√©")
                else:
                    # Verset non trouv√©, continuer avec un contenu minimal au nouveau format
                    verse_content = f"""---

**VERSET {verse_num}**

**üìñ AFFICHAGE DU VERSET :**
[Texte √† consulter dans votre Bible Louis Segond]

**üìö CHAPITRE :**
Verset {verse_num} du chapitre {chapter} de {book_name}.

**üìú CONTEXTE HISTORIQUE :**
[Contexte √† consulter dans des commentaires bibliques]

**‚úùÔ∏è PARTIE TH√âOLOGIQUE :**
[Explication th√©ologique √† consulter dans des ressources d'√©tude biblique]

"""
                    content_parts.append(verse_content)
                    
            except Exception as verse_error:
                logging.error(f"Erreur r√©cup√©ration verset {verse_num}: {verse_error}")
                # Continuer avec les autres versets
                continue
    
    if not content_parts:
        raise Exception("Impossible de r√©cup√©rer les versets via Bible API")
    
    final_content = "\n".join(content_parts)
    
    # Ajouter un en-t√™te explicatif
    header = f"""# üìñ {book_name.title()} {chapter} - Versets {start_verse} √† {end_verse}

*‚ú® √âtude g√©n√©r√©e avec Bible API (Cl√© #5) - Les cl√©s Gemini sont temporairement √©puis√©es*

"""
    
    return header + final_content

# Create the main app without a prefix
app = FastAPI()

# Create a router with the /api prefix
api_router = APIRouter(prefix="/api")


# Define Models
class StatusCheck(BaseModel):
    model_config = ConfigDict(extra="ignore")  # Ignore MongoDB's _id field
    
    id: str = Field(default_factory=lambda: str(uuid.uuid4()))
    client_name: str
    timestamp: datetime = Field(default_factory=lambda: datetime.now(timezone.utc))

class StatusCheckCreate(BaseModel):
    client_name: str

# Add your routes to the router instead of directly to app
@api_router.get("/")
async def root():
    return {"message": "Hello World"}

@api_router.post("/status", response_model=StatusCheck)
async def create_status_check(input: StatusCheckCreate):
    status_dict = input.model_dump()
    status_obj = StatusCheck(**status_dict)
    
    # Convert to dict and serialize datetime to ISO string for MongoDB
    doc = status_obj.model_dump()
    doc['timestamp'] = doc['timestamp'].isoformat()
    
    _ = await db.status_checks.insert_one(doc)
    return status_obj

@api_router.get("/status", response_model=List[StatusCheck])
async def get_status_checks():
    # Exclude MongoDB's _id field from the query results
    status_checks = await db.status_checks.find({}, {"_id": 0}).to_list(1000)
    
    # Convert ISO string timestamps back to datetime objects
    for check in status_checks:
        if isinstance(check['timestamp'], str):
            check['timestamp'] = datetime.fromisoformat(check['timestamp'])
    
    return status_checks

# Fonction pour v√©rifier le quota d'une cl√© Gemini
async def check_gemini_key_quota(api_key: str, key_index: int):
    """
    V√©rifie le quota r√©el d'une cl√© Gemini en faisant un appel de test.
    Retourne le pourcentage de quota utilis√© et le statut.
    """
    try:
        # Tenter un appel de test tr√®s court pour v√©rifier le quota
        chat = LlmChat(
            api_key=api_key,
            session_id=f"health-check-{uuid.uuid4()}",
            system_message="Test"
        ).with_model("gemini", "gemini-2.0-flash")
        
        # Appel minimal pour v√©rifier la cl√©
        test_message = UserMessage(text="Hi")
        await chat.send_message(test_message)
        
        # Si on arrive ici, la cl√© fonctionne
        # Estimer le quota bas√© sur l'usage actuel track√©
        usage_count = gemini_key_usage_count.get(key_index, 0)
        
        # Estimation du quota (√† ajuster selon vos limites r√©elles)
        # Par exemple : 1500 requ√™tes par jour max par cl√©
        max_daily_requests = 1500
        quota_percent = min(100, (usage_count / max_daily_requests) * 100)
        
        return {
            "is_available": True,
            "quota_used": round(quota_percent, 1),
            "usage_count": usage_count,
            "error": None
        }
        
    except Exception as e:
        error_str = str(e).lower()
        
        # D√©tecter les erreurs de quota
        if "quota" in error_str or "429" in error_str or "resource_exhausted" in error_str:
            return {
                "is_available": False,
                "quota_used": 100,
                "usage_count": gemini_key_usage_count.get(key_index, 0),
                "error": "Quota √©puis√©"
            }
        elif "invalid" in error_str or "api_key" in error_str:
            return {
                "is_available": False,
                "quota_used": 0,
                "usage_count": 0,
                "error": "Cl√© invalide"
            }
        else:
            # Autre erreur, on suppose que la cl√© est utilisable
            usage_count = gemini_key_usage_count.get(key_index, 0)
            quota_percent = min(100, (usage_count / 1500) * 100)
            return {
                "is_available": True,
                "quota_used": round(quota_percent, 1),
                "usage_count": usage_count,
                "error": str(e)[:100]
            }

# Fonction pour v√©rifier la Bible API
async def check_bible_api():
    """V√©rifie si la Bible API est accessible."""
    if not BIBLE_API_KEY or not BIBLE_ID:
        return {
            "is_available": False,
            "quota_used": 0,
            "error": "Cl√©s non configur√©es"
        }
    
    try:
        import httpx
        async with httpx.AsyncClient() as client:
            response = await client.get(
                f"https://api.scripture.api.bible/v1/bibles/{BIBLE_ID}",
                headers={"api-key": BIBLE_API_KEY},
                timeout=5.0
            )
            
            if response.status_code == 200:
                return {
                    "is_available": True,
                    "quota_used": 0,  # Bible API g√©n√©ralement pas de quota strict
                    "error": None
                }
            elif response.status_code == 429:
                return {
                    "is_available": False,
                    "quota_used": 100,
                    "error": "Quota √©puis√©"
                }
            else:
                return {
                    "is_available": False,
                    "quota_used": 0,
                    "error": f"HTTP {response.status_code}"
                }
    except Exception as e:
        return {
            "is_available": False,
            "quota_used": 0,
            "error": str(e)[:100]
        }

# Route pour le health check des API avec VRAIES cl√©s
@api_router.get("/health")
async def api_health():
    """
    Retourne le statut de sant√© des API en v√©rifiant les VRAIES cl√©s.
    Les LED changent de couleur selon le quota R√âEL:
    - VERT: quota < 70%
    - JAUNE: quota entre 70% et 90%
    - ROUGE: quota > 90% ou √©puis√©
    """
    base_time = datetime.now(timezone.utc)
    
    # Fonction pour d√©terminer la couleur selon le quota
    def get_api_status(quota_used_percent, is_available):
        """Retourne la couleur et le statut selon le quota utilis√©"""
        if not is_available or quota_used_percent >= 100:
            return "red", "quota_exceeded", "Quota √©puis√©"
        elif quota_used_percent >= 90:
            return "red", "critical", "Critique"
        elif quota_used_percent >= 70:
            return "yellow", "warning", "Attention"
        else:
            return "green", "available", "Disponible"
    
    apis = {}
    
    # V√©rifier chaque cl√© Gemini r√©elle
    for i, api_key in enumerate(GEMINI_KEYS):
        key_index = i
        key_name = f"gemini_{i + 1}"
        
        # V√©rifier le quota r√©el de cette cl√©
        quota_info = await check_gemini_key_quota(api_key, key_index)
        
        color, status, status_text = get_api_status(
            quota_info["quota_used"],
            quota_info["is_available"]
        )
        
        apis[key_name] = {
            "name": f"Gemini Key {i + 1}",
            "color": color,
            "status": status,
            "status_text": status_text,
            "quota_used": quota_info["quota_used"],
            "quota_remaining": 100 - quota_info["quota_used"],
            "usage_count": quota_info["usage_count"],
            "is_available": quota_info["is_available"],
            "error": quota_info["error"],
            "last_used": base_time.isoformat() if key_index == current_gemini_key_index else None
        }
    
    # V√©rifier la Bible API r√©elle
    bible_info = await check_bible_api()
    color, status, status_text = get_api_status(
        bible_info["quota_used"],
        bible_info["is_available"]
    )
    
    apis["bible_api"] = {
        "name": "Bible API",
        "color": color,
        "status": status,
        "status_text": status_text,
        "quota_used": bible_info["quota_used"],
        "quota_remaining": 100 - bible_info["quota_used"],
        "is_available": bible_info["is_available"],
        "error": bible_info["error"],
        "last_used": None
    }
    
    return {
        "status": "healthy",
        "timestamp": base_time.isoformat(),
        "current_key": f"gemini_{current_gemini_key_index + 1}",
        "active_key_index": current_gemini_key_index + 1,
        "bible_api_configured": bool(BIBLE_API_KEY and BIBLE_ID),
        "total_gemini_keys": len(GEMINI_KEYS),
        "total_keys": len(GEMINI_KEYS) + (1 if BIBLE_API_KEY and BIBLE_ID else 0),
        "rotation_info": "Syst√®me √† 5 cl√©s : 4 Gemini + 1 Bible API en rotation automatique",
        "apis": apis
    }

# Route pour g√©n√©rer l'histoire d'un personnage biblique
@api_router.post("/generate-character-history")
async def generate_character_history(request: dict):
    """
    G√©n√®re une histoire narrative d√©taill√©e d'un personnage biblique.
    Utilise l'API Gemini avec rotation automatique des cl√©s.
    """
    try:
        character_name = request.get('character_name', '')
        mode = request.get('mode', 'standard')  # 'standard', 'enrich', 'regenerate'
        previous_content = request.get('previous_content', '')
        
        if not character_name:
            return {
                "status": "error",
                "message": "Nom du personnage manquant"
            }
        
        # Pr√©parer le prompt selon le mode
        if mode == 'enrich' and previous_content:
            # Mode enrichissement : ajouter plus de d√©tails au contenu existant
            prompt = f"""Tu es un expert biblique et th√©ologien. Le r√©cit suivant a d√©j√† √©t√© g√©n√©r√© pour le personnage biblique **{character_name}** :

{previous_content}

Ta mission : ENRICHIR ce r√©cit en ajoutant beaucoup plus de d√©tails, de profondeur et d'informations. Ajoute :

1. **Plus de contexte historique** : D√©tails sur l'√©poque, la g√©ographie, la culture
2. **D√©tails narratifs suppl√©mentaires** : √âl√©ments qu'on aurait pu manquer dans le r√©cit initial
3. **Analyse th√©ologique approfondie** : Interpr√©tations, significations symboliques
4. **Liens avec d'autres passages bibliques** : Connexions avec d'autres personnages ou √©v√©nements
5. **Perspectives diverses** : Diff√©rentes traditions d'interpr√©tation
6. **Applications pratiques** : Comment ces enseignements s'appliquent aujourd'hui

Garde la m√™me structure mais d√©veloppe chaque section avec au moins 50% de contenu suppl√©mentaire. Vise 1200-1500 mots au total.

Commence directement par le titre enrichi: # üìñ {character_name.upper()} - Histoire Biblique Enrichie"""
        
        elif mode == 'regenerate':
            # Mode r√©g√©n√©ration : cr√©er une version compl√®tement nouvelle et plus d√©taill√©e
            prompt = f"""Tu es un expert biblique et th√©ologien renomm√©. Cr√©e un r√©cit narratif EXTR√äMEMENT D√âTAILL√â et APPROFONDI du personnage biblique **{character_name}** en fran√ßais.

Cette version doit √™tre la plus compl√®te possible. Structure ton r√©cit en sections markdown d√©taill√©es :

## üéØ INTRODUCTION (150-200 mots)
- Pr√©sentation captivante du personnage
- Son importance dans l'histoire biblique
- Vue d'ensemble de sa vie

## üìú ORIGINES ET PASS√â (200-250 mots)
### G√©n√©alogie
- Lign√©e familiale compl√®te (parents, grands-parents si connus)
- Tribu ou peuple d'origine
- Signification de son nom

### Contexte familial
- Famille imm√©diate (fr√®res, s≈ìurs, conjoints, enfants)
- Relations familiales importantes
- H√©ritage familial

## üåç CONTEXTE HISTORIQUE (200-250 mots)
- √âpoque pr√©cise (dates, p√©riodes historiques)
- G√©ographie (lieux de vie, d√©placements)
- Contexte politique et social
- Culture et coutumes de l'√©poque

## üìñ R√âCIT DE VIE D√âTAILL√â (400-500 mots)
### Jeunesse et formation
- Enfance et √©ducation
- Premi√®res exp√©riences marquantes
- Formation spirituelle

### √âv√©nements majeurs (chronologique)
- Chaque √©v√©nement cl√© de sa vie
- Actions, d√©cisions, √©preuves
- Interactions avec Dieu et autres personnages

### Accomplissements et d√©fis
- R√©ussites principales
- √âchecs et apprentissages
- Moments de transformation

## üîÆ PR√âSENT ET FUTUR SELON L'√âCRITURE (150-200 mots)
- R√¥le actuel dans le r√©cit biblique
- Proph√©ties le concernant
- Impact eschatologique si applicable
- H√©ritage spirituel continu

## üå≥ G√âN√âALOGIE COMPL√àTE (100-150 mots)
- Arbre g√©n√©alogique ascendant
- Descendants directs
- Lign√©e messianique si applicable

## üìö VERSETS CL√âS ET R√âF√âRENCES (150-200 mots)
- Citations bibliques principales (avec r√©f√©rences pr√©cises)
- Passages o√π il est mentionn√©
- Textes proph√©tiques le concernant

## ‚ú® LE√áONS SPIRITUELLES APPROFONDIES (200-250 mots)
- Enseignements th√©ologiques
- Vertus et exemples √† suivre
- Mises en garde
- Applications contemporaines

## üéì PERSPECTIVES TH√âOLOGIQUES (150-200 mots)
- Interpr√©tations diverses
- Symbolisme et typologie
- Signification dans la tradition chr√©tienne
- Impact sur la doctrine

## üåü H√âRITAGE ET IMPACT (150-200 mots)
- Influence sur l'histoire biblique
- Impact sur la foi chr√©tienne
- R√©f√©rences dans le Nouveau Testament
- Pertinence aujourd'hui

Utilise un style M√âLANGE d'acad√©mique et narratif accessible. Le r√©cit doit √™tre:
- Pr√©cis et factuel (avec r√©f√©rences bibliques)
- Engageant et vivant (ton narratif captivant)
- Complet et exhaustif (ne rien omettre d'important)

Vise 1200-1500 mots minimum. Commence directement par le titre: # üìñ {character_name.upper()} - Histoire Biblique Compl√®te"""
        
        else:
            # Mode standard : r√©cit narratif complet mais mod√©r√©
            prompt = f"""Tu es un expert biblique et th√©ologien. Cr√©e un r√©cit narratif d√©taill√© du personnage biblique **{character_name}** en fran√ßais.

Structure ton r√©cit en sections markdown claires :

## üéØ INTRODUCTION
- Pr√©sentation du personnage et son importance

## üìú ORIGINES ET G√âN√âALOGIE
- Famille, tribu, lign√©e
- Signification du nom
- Contexte familial

## üåç CONTEXTE HISTORIQUE
- √âpoque, lieu, culture
- Contexte politique et social

## üìñ R√âCIT DE VIE (chronologique d√©taill√©)
### Pass√©
- Jeunesse, origines, formation
- Premi√®res exp√©riences

### Pr√©sent (dans le r√©cit biblique)
- √âv√©nements majeurs de sa vie
- Actions, d√©cisions, √©preuves
- Relations avec Dieu et autres personnages

### Futur (selon l'√âcriture)
- Proph√©ties le concernant
- Impact et h√©ritage

## üå≥ G√âN√âALOGIE D√âTAILL√âE
- Ascendants et descendants
- Lign√©e importante

## üìö VERSETS CL√âS
- Citations bibliques avec r√©f√©rences pr√©cises

## ‚ú® LE√áONS SPIRITUELLES
- Enseignements √† tirer
- Applications aujourd'hui

## üåü H√âRITAGE
- Impact sur l'histoire biblique
- Pertinence contemporaine

Utilise un style M√âLANGE d'acad√©mique (pr√©cis, avec r√©f√©rences) et narratif accessible (engageant, vivant).
Vise 800-1200 mots. Commence directement par le titre: # üìñ {character_name.upper()} - Histoire Biblique"""
        
        # Appeler Gemini avec rotation automatique
        api_key_index = current_gemini_key_index
        start_time = time.time()
        
        content = await call_gemini_with_rotation(prompt)
        
        generation_time = time.time() - start_time
        word_count = len(content.split())
        
        return {
            "status": "success",
            "content": content,
            "api_used": f"gemini_{api_key_index + 1}",
            "word_count": word_count,
            "character_name": character_name,
            "mode": mode,
            "generation_time_seconds": round(generation_time, 2)
        }
        
    except Exception as e:
        logger.error(f"Erreur g√©n√©ration histoire personnage: {e}")
        return {
            "status": "error",
            "message": str(e),
            "character_name": character_name
        }

# Route pour g√©n√©rer l'√©tude verset par verset (5 versets par 5)
@api_router.post("/generate-verse-by-verse")
async def generate_verse_by_verse(request: dict):
    """
    G√©n√®re une √©tude verset par verset avec Gemini.
    G√©n√©ration par groupes de 5 versets pour tous les chapitres de chaque livre.
    """
    try:
        passage = request.get('passage', '')
        start_verse = request.get('start_verse', 1)
        end_verse = request.get('end_verse', 5)
        
        if not passage:
            return {
                "status": "error",
                "message": "Passage manquant"
            }
        
        # Parser le passage (ex: "Gen√®se 1" ou "Gen√®se 1:6-10")
        import re
        
        # Extraire le livre, chapitre et versets si pr√©sents
        # Format possible: "Gen√®se 1:6-10" ou "Gen√®se 1"
        verse_pattern = re.match(r'^(.+?)\s+(\d+)(?::(\d+)(?:-(\d+))?)?$', passage.strip())
        
        if not verse_pattern:
            return {
                "status": "error",
                "message": f"Format de passage invalide: {passage}. Utilisez 'Livre Chapitre' ou 'Livre Chapitre:Verset-Verset'"
            }
        
        book_name = verse_pattern.group(1).strip()
        chapter = verse_pattern.group(2)
        
        # Si des versets sont sp√©cifi√©s dans le passage, les utiliser
        if verse_pattern.group(3):
            start_verse = int(verse_pattern.group(3))
            if verse_pattern.group(4):
                end_verse = int(verse_pattern.group(4))
            else:
                end_verse = start_verse  # Un seul verset
        
        logging.info(f"G√©n√©ration verset par verset: {book_name} {chapter}, versets {start_verse}-{end_verse}")
        
        # Pr√©parer le prompt pour Gemini avec instructions d√©taill√©es pour unicit√© et qualit√©
        prompt = f"""Tu es un expert biblique et th√©ologien sp√©cialis√© dans l'ex√©g√®se verset par verset.

MISSION CRITIQUE : G√©n√®re une √©tude UNIQUE, D√âTAILL√âE et APPROFONDIE EXCLUSIVEMENT pour les versets {start_verse} √† {end_verse} de **{book_name} chapitre {chapter}** en fran√ßais.

‚ö†Ô∏è IMP√âRATIF D'UNICIT√â : Chaque verset DOIT avoir une analyse SP√âCIFIQUE et UNIQUE. Ne JAMAIS r√©p√©ter les m√™mes phrases ou explications g√©n√©riques. Chaque verset a sa propre richesse th√©ologique - explore-la en profondeur.

Pour CHAQUE verset de {start_verse} √† {end_verse}, structure RIGOUREUSEMENT ainsi :

---

**VERSET {start_verse}**

**üìñ AFFICHAGE DU VERSET :**
[Le texte biblique EXACT et COMPLET du verset {start_verse} en fran√ßais Louis Segond - v√©rifie le num√©ro de verset]

**üìö CHAPITRE :**
[Contexte SP√âCIFIQUE du verset {start_verse} dans le chapitre {chapter} :]
- Quelle est la PLACE EXACTE de ce verset dans la progression narrative/th√©matique du chapitre ?
- Comment ce verset {start_verse} se relie-t-il aux versets pr√©c√©dents et suivants ?
- Quel est le TH√àME PRINCIPAL que ce verset {start_verse} d√©veloppe dans le chapitre ?
(3-4 phrases d√©taill√©es et SP√âCIFIQUES au verset {start_verse})

**üìú CONTEXTE HISTORIQUE :**
[Contexte historique et culturel SP√âCIFIQUE au verset {start_verse} :]
- P√©riode historique PR√âCISE et situation du peuple √† ce moment
- Contexte g√©ographique et social PARTICULIER mentionn√© ou sous-entendu dans CE verset
- Circonstances de r√©daction SP√âCIFIQUES
- Analyse linguistique des MOTS-CL√âS du verset {start_verse} (grec/h√©breu avec translitt√©ration et signification originale)
- R√©f√©rences historiques ou arch√©ologiques pertinentes
(Minimum 100 mots - sois exhaustif et pr√©cis)

**‚úùÔ∏è PARTIE TH√âOLOGIQUE :**
[Explication th√©ologique APPROFONDIE et UNIQUE du verset {start_verse} :]

**Signification th√©ologique centrale :** Quelle v√©rit√© divine r√©v√®le SP√âCIFIQUEMENT ce verset {start_verse} ? En quoi est-il unique dans la r√©v√©lation biblique ?

**Enseignements doctrinaux :** Quelles doctrines bibliques ce verset {start_verse} illustre-t-il ou enseigne-t-il ?

**Application pratique :** Comment ce verset {start_verse} s'applique-t-il CONCR√àTEMENT √† la vie chr√©tienne moderne ? Donne des exemples PRATIQUES et ACTUELS.

**R√©f√©rences bibliques crois√©es :** Liste 3-5 passages bibliques qui √âCLAIRENT ou COMPL√àTENT ce verset {start_verse}, en expliquant bri√®vement le lien.

**Perspective spirituelle :** Quelle transformation spirituelle ce verset {start_verse} appelle-t-il dans la vie du croyant ?

(Minimum 150 mots - d√©veloppe chaque point avec profondeur)

---

**VERSET {start_verse + 1}**

[R√©p√®te la M√äME STRUCTURE EXACTE pour le verset {start_verse + 1}, mais avec un contenu COMPL√àTEMENT DIFF√âRENT ET SP√âCIFIQUE √† ce nouveau verset]

---

[Continue ainsi pour CHAQUE verset jusqu'au verset {end_verse}]

**R√àGLES ABSOLUES :**
1. ‚úÖ Chaque verset doit avoir un contenu UNIQUE - AUCUNE r√©p√©tition entre les versets
2. ‚úÖ Utilise EXACTEMENT les num√©ros de versets demand√©s ({start_verse} √† {end_verse})
3. ‚úÖ Minimum 250 mots DIFF√âRENTS par verset
4. ‚úÖ Cite des r√©f√©rences bibliques PR√âCISES avec livre, chapitre et verset
5. ‚úÖ Analyse linguistique avec mots h√©breux/grecs R√âELS du texte
6. ‚úÖ Applications pratiques CONCR√àTES et MODERNES
7. ‚úÖ Reste fid√®le √† l'ex√©g√®se biblique orthodoxe

Commence DIRECTEMENT avec "---" puis "**VERSET {start_verse}**" sans aucune introduction g√©n√©rale."""

        # Appeler Gemini avec rotation automatique
        start_time = time.time()
        
        content = await call_gemini_with_rotation(prompt)
        
        generation_time = time.time() - start_time
        word_count = len(content.split())
        
        return {
            "status": "success",
            "content": content,
            "api_used": f"gemini_{current_gemini_key_index + 1}",
            "word_count": word_count,
            "passage": passage,
            "verses_generated": f"{start_verse}-{end_verse}",
            "generation_time_seconds": round(generation_time, 2),
            "source": "gemini_ai",
            "from_cache": False
        }
        
    except Exception as e:
        logging.error(f"Erreur g√©n√©ration verset par verset: {e}")
        return {
            "status": "error",
            "message": str(e),
            "passage": request.get('passage', '')
        }

# Include the router in the main app
app.include_router(api_router)

app.add_middleware(
    CORSMiddleware,
    allow_credentials=True,
    allow_origins=os.environ.get('CORS_ORIGINS', '*').split(','),
    allow_methods=["*"],
    allow_headers=["*"],
)

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

@app.on_event("shutdown")
async def shutdown_db_client():
    client.close()